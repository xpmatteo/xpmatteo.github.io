<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>
	Comments on: TDD and FUD	</title>
	<atom:link href="http://matteo.vaccari.name/blog/archives/109/feed" rel="self" type="application/rss+xml" />
	<link>http://matteo.vaccari.name/blog/archives/109</link>
	<description>Extreme enthusiasm</description>
	<lastBuildDate>
	Mon, 25 Feb 2019 15:18:16 +0000	</lastBuildDate>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.1.1</generator>
			<item>
				<title>
				By: matteo				</title>
				<link>http://matteo.vaccari.name/blog/archives/109/comment-page-1#comment-67899</link>
		<dc:creator><![CDATA[matteo]]></dc:creator>
		<pubDate>Wed, 30 Jul 2008 13:11:59 +0000</pubDate>
		<guid isPermaLink="false">http://matteo.vaccari.name/blog/?p=109#comment-67899</guid>
					<description><![CDATA[Hi David,

this is a point; but is that your experience?  Do you really find that it is the case?  So what you are advocating is having acceptance/integration tests as safety nets in addition to unit tests?  I guess so, given your background; and I agree.  It&#039;s not clear to me that Jim&#039;s original post really ment this.]]></description>
		<content:encoded><![CDATA[<p>Hi David,</p>
<p>this is a point; but is that your experience?  Do you really find that it is the case?  So what you are advocating is having acceptance/integration tests as safety nets in addition to unit tests?  I guess so, given your background; and I agree.  It&#8217;s not clear to me that Jim&#8217;s original post really ment this.</p>
]]></content:encoded>
						</item>
						<item>
				<title>
				By: David Peterson				</title>
				<link>http://matteo.vaccari.name/blog/archives/109/comment-page-1#comment-67726</link>
		<dc:creator><![CDATA[David Peterson]]></dc:creator>
		<pubDate>Mon, 28 Jul 2008 07:17:28 +0000</pubDate>
		<guid isPermaLink="false">http://matteo.vaccari.name/blog/?p=109#comment-67726</guid>
					<description><![CDATA[I think one of Jim&#039;s messages is that the trouble with TDD, as it is generally practised, is that it focuses on units (classes).

If you want to rearchitect and move functionality from one class to another you have to change the tests at the same time as the code. Bang goes your safety net.

The tests can actually act as a deterrent to the kinds of large-scale change that are needed to keep an architecture clean and simple, since making large-scale changes will involve unpicking your safety net while you work.]]></description>
		<content:encoded><![CDATA[<p>I think one of Jim&#8217;s messages is that the trouble with TDD, as it is generally practised, is that it focuses on units (classes).</p>
<p>If you want to rearchitect and move functionality from one class to another you have to change the tests at the same time as the code. Bang goes your safety net.</p>
<p>The tests can actually act as a deterrent to the kinds of large-scale change that are needed to keep an architecture clean and simple, since making large-scale changes will involve unpicking your safety net while you work.</p>
]]></content:encoded>
						</item>
						<item>
				<title>
				By: uberto				</title>
				<link>http://matteo.vaccari.name/blog/archives/109/comment-page-1#comment-37674</link>
		<dc:creator><![CDATA[uberto]]></dc:creator>
		<pubDate>Sat, 08 Mar 2008 11:36:16 +0000</pubDate>
		<guid isPermaLink="false">http://matteo.vaccari.name/blog/?p=109#comment-37674</guid>
					<description><![CDATA[]]></description>
		<content:encoded><![CDATA[<p>Mmmh&#8230; let me to reformulate my phrase.<br />
TDD doesn’t improve the architecture, but it&#8217;s a very good tool to improve design.<br />
In other words, you need to study in order to improve your ability on design. TDD in itself doesn&#8217;t drive anybody toward a better design, it drives you (you Matteo) because you previously knew what a good design is.<br />
I experienced very bad design created with TDD by people who doesn&#8217;t understand the design principles.</p>
]]></content:encoded>
						</item>
						<item>
				<title>
				By: matteo				</title>
				<link>http://matteo.vaccari.name/blog/archives/109/comment-page-1#comment-34838</link>
		<dc:creator><![CDATA[matteo]]></dc:creator>
		<pubDate>Sat, 23 Feb 2008 09:28:04 +0000</pubDate>
		<guid isPermaLink="false">http://matteo.vaccari.name/blog/?p=109#comment-34838</guid>
					<description><![CDATA[Uberto, I disagree.  I think TDD is primarily a tool for exploring and finding good design.  The UT protection is a beneficial side effect, but it is not the primary reason for doing TDD.  I mean, TDD as in the book by Kent Beck.  If you are just doing unit testing, then you enjoy the protection while working, but it&#039;s not all there could be to testing.  TDD is about using the tests to drive the design, in an incremental way.  

Now that does not mean that TDD gives you good design automatically!  It still takes skill and intelligence and care and attention, just like when you do design without TDD.

Some people are good at design, Jim Coplien is certainly one of them.  Ordinary programmers like me have a lot to gain from TDD, it helps us get to a good design.  Not automatically, not guaranteed.  But it improves our chances, a lot.]]></description>
		<content:encoded><![CDATA[<p>Uberto, I disagree.  I think TDD is primarily a tool for exploring and finding good design.  The UT protection is a beneficial side effect, but it is not the primary reason for doing TDD.  I mean, TDD as in the book by Kent Beck.  If you are just doing unit testing, then you enjoy the protection while working, but it&#8217;s not all there could be to testing.  TDD is about using the tests to drive the design, in an incremental way.  </p>
<p>Now that does not mean that TDD gives you good design automatically!  It still takes skill and intelligence and care and attention, just like when you do design without TDD.</p>
<p>Some people are good at design, Jim Coplien is certainly one of them.  Ordinary programmers like me have a lot to gain from TDD, it helps us get to a good design.  Not automatically, not guaranteed.  But it improves our chances, a lot.</p>
]]></content:encoded>
						</item>
						<item>
				<title>
				By: uberto				</title>
				<link>http://matteo.vaccari.name/blog/archives/109/comment-page-1#comment-34555</link>
		<dc:creator><![CDATA[uberto]]></dc:creator>
		<pubDate>Wed, 20 Feb 2008 22:11:19 +0000</pubDate>
		<guid isPermaLink="false">http://matteo.vaccari.name/blog/?p=109#comment-34555</guid>
					<description><![CDATA[Matteo, I agree with Jim that TDD doesn&#039;t improve the architecture... hey, also wearing an helmet while you&#039;re working on a scaffolding doesn&#039;t improve house architecture!
But when I&#039;m doing my work (i.e. write code as good as I can) I like the warm protection of a good suite of UT.]]></description>
		<content:encoded><![CDATA[<p>Matteo, I agree with Jim that TDD doesn&#8217;t improve the architecture&#8230; hey, also wearing an helmet while you&#8217;re working on a scaffolding doesn&#8217;t improve house architecture!<br />
But when I&#8217;m doing my work (i.e. write code as good as I can) I like the warm protection of a good suite of UT.</p>
]]></content:encoded>
						</item>
						<item>
				<title>
				By: Andrea				</title>
				<link>http://matteo.vaccari.name/blog/archives/109/comment-page-1#comment-34316</link>
		<dc:creator><![CDATA[Andrea]]></dc:creator>
		<pubDate>Mon, 18 Feb 2008 16:54:17 +0000</pubDate>
		<guid isPermaLink="false">http://matteo.vaccari.name/blog/?p=109#comment-34316</guid>
					<description><![CDATA[Just to quote Kent Beck from the acknowledgment in TDD By Example:
&quot;Finally, to the unknown author of the book which I read as a weird 12-year-old that suggested you type in the expected output tape from a real input tape, then code until the actual results matched the expected result, thank you, thank you, thank you.&quot;]]></description>
		<content:encoded><![CDATA[<p>Just to quote Kent Beck from the acknowledgment in TDD By Example:<br />
&#8220;Finally, to the unknown author of the book which I read as a weird 12-year-old that suggested you type in the expected output tape from a real input tape, then code until the actual results matched the expected result, thank you, thank you, thank you.&#8221;</p>
]]></content:encoded>
						</item>
						<item>
				<title>
				By: matteo				</title>
				<link>http://matteo.vaccari.name/blog/archives/109/comment-page-1#comment-31409</link>
		<dc:creator><![CDATA[matteo]]></dc:creator>
		<pubDate>Mon, 04 Feb 2008 14:45:10 +0000</pubDate>
		<guid isPermaLink="false">http://matteo.vaccari.name/blog/?p=109#comment-31409</guid>
					<description><![CDATA[And, Jim: I didn&#039;t meant that *you* can&#039;t do TDD.  I don&#039;t know either way about that.  I meant that if you don&#039;t refactor, you&#039;re not doing TDD, in which case you have no base to claim TDD doesn&#039;t work.]]></description>
		<content:encoded><![CDATA[<p>And, Jim: I didn&#8217;t meant that *you* can&#8217;t do TDD.  I don&#8217;t know either way about that.  I meant that if you don&#8217;t refactor, you&#8217;re not doing TDD, in which case you have no base to claim TDD doesn&#8217;t work.</p>
]]></content:encoded>
						</item>
						<item>
				<title>
				By: matteo				</title>
				<link>http://matteo.vaccari.name/blog/archives/109/comment-page-1#comment-31405</link>
		<dc:creator><![CDATA[matteo]]></dc:creator>
		<pubDate>Mon, 04 Feb 2008 14:22:56 +0000</pubDate>
		<guid isPermaLink="false">http://matteo.vaccari.name/blog/?p=109#comment-31405</guid>
					<description><![CDATA[Hi Jim,

Thank for taking the time to comment here.  I think it&#039;s cool that you still write code, as opposed to just writing &quot;architecture&quot;.  I didn&#039;t mean to sound disrespectful, I was just mocking you.  I don&#039;t think I need to do a full literature search on your recent interviews just to comment on your blog; I still think your post is not substantiated, and it sounds  emotionally charged to me.  Anyway, it&#039;s way less substantiated than your comment here.

I disagree on the fact that TDD existed before Beck.  TDD is not just automated testing; it&#039;s writing the test first, and refactoring, and doing it incrementally.  Show me where this was written before Beck.  I don&#039;t think BDD is substantially different from TDD.  I&#039;d say it&#039;s an incremental improvement on BDD.

I disagree also that TDD leads to procedural code wrapped in OO, or that refactoring doesn&#039;t scale beyond the confines of a single class.  In the experience of my team this is certainly not true.  I wish I could do experiments to measure the effectiveness of TDD versus not doing it; but I mainly work as a developer, so I don&#039;t do much in the way of research.  I can only say that &quot;it works for me and my team.&quot;

Lastly, my University is a small one in a small town, yet I think I and my collegues do a decent job of educating young computer professionals.  The work they do after they graduate makes me proud, even though I don&#039;t claim it&#039;s just thanks to my teaching.  
]]></description>
		<content:encoded><![CDATA[<p>Hi Jim,</p>
<p>Thank for taking the time to comment here.  I think it&#8217;s cool that you still write code, as opposed to just writing &#8220;architecture&#8221;.  I didn&#8217;t mean to sound disrespectful, I was just mocking you.  I don&#8217;t think I need to do a full literature search on your recent interviews just to comment on your blog; I still think your post is not substantiated, and it sounds  emotionally charged to me.  Anyway, it&#8217;s way less substantiated than your comment here.</p>
<p>I disagree on the fact that TDD existed before Beck.  TDD is not just automated testing; it&#8217;s writing the test first, and refactoring, and doing it incrementally.  Show me where this was written before Beck.  I don&#8217;t think BDD is substantially different from TDD.  I&#8217;d say it&#8217;s an incremental improvement on BDD.</p>
<p>I disagree also that TDD leads to procedural code wrapped in OO, or that refactoring doesn&#8217;t scale beyond the confines of a single class.  In the experience of my team this is certainly not true.  I wish I could do experiments to measure the effectiveness of TDD versus not doing it; but I mainly work as a developer, so I don&#8217;t do much in the way of research.  I can only say that &#8220;it works for me and my team.&#8221;</p>
<p>Lastly, my University is a small one in a small town, yet I think I and my collegues do a decent job of educating young computer professionals.  The work they do after they graduate makes me proud, even though I don&#8217;t claim it&#8217;s just thanks to my teaching.  </p>
]]></content:encoded>
						</item>
						<item>
				<title>
				By: Jim Coplien				</title>
				<link>http://matteo.vaccari.name/blog/archives/109/comment-page-1#comment-31391</link>
		<dc:creator><![CDATA[Jim Coplien]]></dc:creator>
		<pubDate>Mon, 04 Feb 2008 10:06:10 +0000</pubDate>
		<guid isPermaLink="false">http://matteo.vaccari.name/blog/?p=109#comment-31391</guid>
					<description><![CDATA[]]></description>
		<content:encoded><![CDATA[<p>Sigh, it&#8217;s interesting to stumble across postings like this on the web, that are wrong on so many points. It&#8217;s sad to find this from a &#8220;contract teacher&#8221; who is in a position to convey such &#8220;insights&#8221; to students. With the greatest humble respect for the author, let me offer another perspective.</p>
<p>On the very back cover of his book, Beck explains that the idea of writing tests to drive the code is not new. Maybe you&#8217;re a young buck, but we were doing this in FORTRAN back in the 1970s. Particularly when doing bottom-up design, it is great to build a set of APIs that are fully tested, and then build a layer on top of that. It works great when procedures are your primary organizing principle and when procedures are relatively decoupled (meaning there is little global data). Been there, done that, bought the T-shirt. In an OO environment, it sucks. Every procedure shares data that are global to it and other member functions. The essence of system form is in its object-ness rather than its procedure-ness. When using TDD, you build a bottom-up FORTRAN program in a Java wrapper. Whoopee.</p>
<p>Dan North, tired of TDD being &#8220;full of dead ends,&#8221; has moved on to BDD.</p>
<p>Read XP Refactored and the arguments (for which we have data) that unit testing in fact increases your bug density.</p>
<p>Marko Taipale and Ari Tannien (write to me and I&#8217;ll put you in touch with them) did an experiment to try out TDD in a major web gaming product in EGET in Finland. After six months they found that TDD brought them to the architecture they could have anticipated (and did anticipate) at the beginning. He writes, &#8220;Yep, we built a gaming platform with TDD and pretty much discovered that TDD offers _nothing_ for architecture.&#8221; Further, &#8220;An indication of TDD causing design problems for us was code smells that would not go away with refactoring. The code  is clean and refactored and whatnot, but still something feels wrong.&#8221;</p>
<p>In my own company, we traced several problems with the GUI (basically issues of modality and lack of monotony — the two greatest interaction design failures) to TDD. Had the team taken a domain view — which is what Trygve Reenskaug holds to be the foundation of OOP — we would have captured the user&#8217;s conceptual model in the code.</p>
<p>In a large client of ours (which has 3 million customers) an XP project crashed and burned early on for lack of a sound architecture — an architecture that was supposed to owe to TDD. They went to the boss and asked to re-factor the code; the boss was impressed with the astuteness of his Agile little bunch. They then did a &#8220;refactoring sprint&#8221; that lasted as long as the entire project had taken up to that point. (Hey, what happened to constant refactoring? Oh, they had been doing that, too. Read below.)</p>
<p>Jeff Sutherland, inventor of Scrum, tells that people at his company, PatientKeeper, don&#8217;t do unit testing but use system testing instead. They, er, seem to be doing pretty well.</p>
<p>I could go on.</p>
<p>Clearly you have not read about the refactoring part. Refactoring is a disciplined activity that preserves functionality while making the code cleaner. I know how to do that within a class or within a class hierarchy. To argue that functionality is preserved while editing across class categories is pretentious. Such changes are not refactoring; they are just coding. Most often, they are just hacking. And the kinds of tests that one writes to scaffold a class definition can&#8217;t catch failures that arise in such changes. Also, see what Marko and Ari say above. And the constant refactoring being done in our client&#8217;s code only cleaned up stuff within architectural units, not between them. Since architecture is about what happens between the parts, moreso than within them, refactoring buys you very little for architectural improvement.</p>
<p>Write programs again? I work for a large financial client here in Copenhagen where I am working on a complex multi-threaded application. I&#8217;d guess I did several tens of thousands of lines of code last year and the project continues. Going into system test, the system has had five bugs.</p>
<p>So your post was wrong on the count of TDD being three years old. It was wrong about refactoring. It was wrong about my coding practice. I could go on, but just wanted to say enough that people reflect on your credibility to make these arguments. Let me suggest you go back to my &#8216;blog at <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=216434" rel="nofollow">http://www.artima.com/weblogs/viewpost.jsp?thread=216434</a> where I reflect on emotionally charged and substance-poor TDD arguments. The above posting certainly qualifies. The &#8216;blog isn&#8217;t about TDD at all but about the inability of people to substantiate their arguments with something other than &#8220;it feels good to me.&#8221; If you want to read what I feel about TDD, rather than about the &#8216;blog theme of unthinking so-called professionals, read either the article I published in Better Software in November and December last year, or the interview of me in December&#8217;s Lean magazine. I&#8217;m sorry that I need to take up arguments with an esteemed lecturer at Università dell&#8217;Insubria in a &#8216;blog where he hasn&#8217;t done a basic literature search, substantiated his arguments with logical progression, offered any empirical evidence, or put forth any theory. Maybe you can start doing the work of an academic or, at least, of a professional. O, the horror! :-)</p>
]]></content:encoded>
						</item>
			</channel>
</rss>
