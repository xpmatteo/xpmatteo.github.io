<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Design Exercise &#8211; Extreme Enthusiasm</title>
	<atom:link href="http://matteo.vaccari.name/blog/archives/category/design-exercise/feed" rel="self" type="application/rss+xml" />
	<link>http://matteo.vaccari.name/blog</link>
	<description>Extreme enthusiasm</description>
	<lastBuildDate>
	Wed, 08 Jan 2020 14:48:28 +0000	</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.1.1</generator>
	<item>
		<title>Exercise: a Pesky Error Message</title>
		<link>http://matteo.vaccari.name/blog/archives/789</link>
				<comments>http://matteo.vaccari.name/blog/archives/789#comments</comments>
				<pubDate>Tue, 28 Aug 2012 19:51:01 +0000</pubDate>
		<dc:creator><![CDATA[matteo]]></dc:creator>
				<category><![CDATA[Agile]]></category>
		<category><![CDATA[Design Exercise]]></category>

		<guid isPermaLink="false">http://matteo.vaccari.name/blog/?p=789</guid>
				<description><![CDATA[We have some files containing sequences of integers, one number per line. We want to compute the sum of the numbers. The catch is that the numbers are written as roman numerals. This code works, but there is a problem: every time we run the tests, a nasty error message appears on standard error. We&#8217;d [&#8230;]]]></description>
								<content:encoded><![CDATA[<style type="text/css" media="screen">
  pre em {
    color: red;
  }
  p.label {
    font-size: smaller;
    margin-top: -1em;
    font-style: italic;
    color: gray;
    text-align: right;
  }
  p.label:before { 
    content: "Snippet ";
  }
</style>
<p>We have some files containing sequences of integers, one number per line. We want to compute the sum of the numbers. The catch is that the numbers are written as roman numerals.</p>
<p>This code works, but there is a problem: every time we run the tests, a nasty error message appears on standard error. We&#8217;d like to be able to turn off the error message when we run the tests. The error message should still appear when the code is run in production.</p>
<p>Your job: make it so that the error message does not appear when the tests are run.</p>
<p>See here the starting code.  Copy it in a file <code>pesky.rb</code> and run it with the commmand <kbd>ruby pesky.rb</kbd>.</p>
<p><code></p>
<pre>
class RomanNumeral
  def initialize(string)
    @value = string
  end

  def to_i
    case @value
    when "I"; 1
    when "II"; 2
    when "III"; 3
    when "IV"; 4
    else
      STDERR.puts("Invalid numeral '#{@value}'")
      0
    end
  end
end

class RomanSequence
  def initialize(input)
    @input = input
  end

  def sum
    result = 0
    @input.lines.each do |line|
      roman = RomanNumeral.new(line.chomp)
      result += roman.to_i
    end
    return result
  end  
end

require "minitest/autorun"
require "stringio"

class RomanSequenceTest &lt; MiniTest::Unit::TestCase
  def test_adds_roman_numerals
    input = StringIO.new("I\nII\nIII\n")
    assert_equal 6, RomanSequence.new(input).sum
  end

  def test_skips_invalid_numerals
    input = StringIO.new("I\nY\nIII\n")
    assert_equal 4, RomanSequence.new(input).sum
  end  
end
</pre>
<p></code></p>
<h3>PLEASE</h3>
<p>Solve the exercise before continuing.</p>
<div style="text-align: center">*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<br />*
</div>
<p><span id="more-789"></span></p>
<h3>Bad solution: going global</h3>
<p>We&#8217;d like to stop RomanNumeral from producing error messages, but we have no way to reach the RomanNumeral from the unit test. What to do? One possible solution is to add a class variable to RomanNumeral that controls the verbosity.</p>
<p><code></p>
<pre>
def test_skips_invalid_numerals
  <em>RomanNumeral.we_are_in_test_mode = true</em>
  input = StringIO.new("I\nY\nIII\n")
  assert_equal 4, RomanSequence.new(input).sum
end  
</pre>
<p></code></p>
<p class="label">1.0</p>
<p>Yuck! The name of this variable is terrible. Our RomanNumeral should not care about running in test or running in production. It <em>may</em> care about running in &#8220;verbose&#8221; or &#8220;quiet&#8221; mode.  The name &#8220;we_are_in_test_mode&#8221; makes the code <em>dependent on the context</em> it runs in.  This is bad; we want our code to be independent on context, so that we can use it in different contexts.  The names &#8220;verbose&#8221; and &#8220;quiet&#8221; refer to what the object actually wants to do, not to where it is used.  </p>
<p>So we&#8217;ve decided that we want to use &#8220;quiet&#8221; and &#8220;verbose&#8221;.  Which one will be the default?  Since we&#8217;d prefer not to change all production code that calls RomanNumeral, we prefer to make &#8220;verbose&#8221; the default, and change our test to request &#8220;quiet&#8221; mode.</p>
<p><code></p>
<pre>
def test_skips_invalid_numerals
  <em>RomanNumeral.quiet = true</em>
  input = StringIO.new("I\nY\nIII\n")
  assert_equal 4, RomanSequence.new(input).sum
end  
</pre>
<p></code></p>
<p class="label">1.1</p>
<p>This is slightly better, but still it relies on what is, in the end, a global variable. All class variables (called &#8220;static&#8221; variables in other languages) are global variables: accessible from everywhere, modifiable by anybody.</p>
<p>The variable would be used in RomanNumeral like this:</p>
<p><code></p>
<pre>
class RomanNumeral  
  def to_i
    case @value
      ...
    else
      STDERR.puts("Invalid numeral '#{@value}'") <em>unless @quiet</em>
      return 0
    end
  end
end
</pre>
<p></code></p>
<p>A variant of this theme would be to define a globally accessible logger facility, like</p>
<p><code></p>
<pre>
def test_skips_invalid_numerals
  <em>Logger.level = Logger::FATAL # silence warnings and errors</em>
  input = StringIO.new("I\nY\nIII\n")
  assert_equal 4, RomanSequence.new(input).sum
end  
</pre>
<p></code></p>
<p class="label">1.2</p>
<p>The logger would be used in RomanNumeral like this:</p>
<p><code></p>
<pre>
class RomanNumeral  
  def to_i
    case @value
      ...
    else
      <em>Logger.warn("Invalid numeral '#{@value}'")</em>
      return 0
    end
  end
end
</pre>
<p></code></p>
<p>This relies on a global variable (that is, <code>Logger.level</code>) <em>and</em> a class method (that is, <code>Logger.warn</code>).  Class methods are, in effect, not really methods but global procedures.  So what, I hear you say? What&#8217;s the problem?</p>
<p>Well&#8230; it might not be a problem; it could work.  But consider this: relying on a global variable increases complexity in your tests, because you have to change the variable before the test, and then you must remember to reset it to its previous value after the test.  Thus, the global also increases the risk of interaction between tests.  (We want our tests to be independent!)  </p>
<p>The Logger variant is slightly better because we are moving the decision to write to STDERR in a separate procedure.  If STDERR were used in many places in our code, it would be difficult to change the output file to something else should we want to.  Moving this decision to the procedure <code>Logger.warn</code> makes it easier to change.  </p>
<p>Still, we&#8217;re relying on a global procedure.  This means that if we change that procedure, all calling code is affected.  This makes it more difficult to have different logging behaviour in different places.  Changing the global verbosity level will affect all logging behaviour of the application.</p>
<p>If you want flexible code, class (static) variables and methods ought to be avoided if at all possible.</p>
<p>Scores:</p>
<ul class="scores">
<li>Award yourself -1 points if your solution uses a global Logger facility, like snippet (1.2), for using global procedures instead of objects.</li>
<li>Award -1 points if your solution uses a global variable, like snippet (1.1)</li>
<li>Award -3 points if your solution uses a global variable that has a name like that of snippet (1.1), for using a context-dependent name.</li>
</ul>
<h3>Bad solution: passing information up the call stack</h3>
<p> If we want to avoid global state, one idea would be to equip each single instance of RomanNumeral with its own verbosity setting. The problem here is that the Roman Numeral object is created in a place that is not accessible from the test:</p>
<p><code></p>
<pre>
def test_skips_invalid_numerals
  input = StringIO.new("I\nY\nIII\n")
  assert_equal 4, RomanSequence.new(input).sum
end  
</pre>
<p></code></p>
<p>What can we do? We cannot pass the RomanNumeral to RomanSequence as a collaborator, because in fact we need not one but many RomanNumbers. In these cases, one thing you can do is to pass a factory that creates RomanNumbers. The factory that is used in the tests will create &#8220;quiet&#8221; RomanNumbers, the factory that will be used in production will create &#8220;verbose&#8221; ones.</p>
<p><code></p>
<pre>
def test_skips_invalid_numerals
  input = StringIO.new("I\nY\nIII\n")
  <em>factory = RomanNumberFactory.new(false)</em>
  assert_equal 4, RomanSequence.new(input, <em>factory</em>).sum
end  
</pre>
<p></code></p>
<p class="label">2.0</p>
<p>This is ugly.  What does &#8220;false&#8221; mean?  A better way is to pass an explicit hash of options.  The hash in Ruby look like this:</p>
<p><code></p>
<pre>
def test_skips_invalid_numerals
  input = StringIO.new("I\nY\nIII\n")
  factory = RomanNumberFactory.new(<em>:quiet => true</em>)
  assert_equal 4, RomanSequence.new(input, factory).sum
end  
</pre>
<p></code></p>
<p class="label">2.1</p>
<p>Now at least when we read the code we understand the intent.</p>
<p>An alternative to the factory is to pass the desired verbosity option to the RomanSequence, and have the sequence pass it up to every RomanNumeral it creates:</p>
<p><code></p>
<pre>  
def test_skips_invalid_numerals
  input = StringIO.new("I\nY\nIII\n")
  assert_equal 4, RomanSequence.new(input, <em>:quiet => true</em>).sum
end  

class RomanSequence
  def initialize(input, <em>options</em>)
    @input = input
    <em>@options = options</em>
  end
  
  def sum
    result = 0
    @input.lines.each do |line|
      roman = RomanNumeral.new(line.chomp, <em>options</em>)
      result += roman.to_i
    end
    return result
  end  
end
</pre>
<p></code></p>
<p class="label">2.2</p>
<p>All of the solutions in this section work, and are even reasonable when you look at them from here. They are not right, however, because they don&#8217;t go in the direction of simplicity. In order to avoid a nasty error message in the tests, we are complicating both RomanNumeral and RomanSequence. In the case of the factory, we are even introducing a new class.</p>
<p>Scores:</p>
<ul class="scores">
<li>-1 for passing options (2.2) for increased complexity</li>
<li>-2 for passing a factory (2.1) for even more complexity</li>
<li>-3 for passing &#8220;false&#8221; (2.0) for uncommunicative code, and increased complexity</li>
</ul>
<h3>Good solution: handle exceptions at the proper level</h3>
<p>The occurrence of an invalid RomanNumeral is an exceptional circumstance; we expect that the numerals will be correct most of the time. What <strong>policy</strong> should we apply for the case when we encounter an incorrect numeral? One plausible policy is to stop the execution of the whole program. Another plausible policy is to ignore the invalid numeral and carry on. Yet another policy is to log an error message and then ignore the invalid numeral.</p>
<p>Which one should we choose? It depends! We might want to choose one or the other route in different programs, or in different parts of the same program. The point I want to make is that it&#8217;s not RomanNumeral&#8217;s place to decide which policy to adopt. All that RomanNumeral should do is to signal that it can&#8217;t continue by raising an exception. Returning a conventional number like &#8220;0&#8221; is also an option, but is much worse.  When &#8220;0&#8221; is used in the context of a sum, it will be ignored.  But what if we were using the number in a multiplication?  The end result would be changed to zero.</p>
<p>We want to learn two principles here:</p>
<ul>
<li>The Policy-Mechanism Separation Principle. When a computation can&#8217;t continue, it should raise an exception, not return a conventional value. Let someone else decide what to do.  Don&#8217;t embed the policy in the object; this would make the object context-dependent.</li>
<li>The Centralized Exception Handling Principle.<br />
    Handling exceptions shouls be centralized, in some place low in the call stack.</li>
</ul>
<p>In general, the policy of how to deal with exceptions should be centralized in one place. The best place, in general, is close to the main loop of the application.</p>
<p><code></p>
<pre>
class RomanSequence
  def initialize(input, <em>options={}</em>)
    @input = input
    <em>@options = options</em>
  end

  def sum
    result = 0
    @input.lines.each do |line|
      <em>begin</em>
        roman = RomanNumeral.new(line.chomp)
        result += roman.to_i
      <em>rescue ArgumentError => e
        STDERR.puts(e) unless @options[:quiet]
      end</em>
    end
    return result
  end  
end
</pre>
<p></code></p>
<p>Moving exception control to RomanSequence has the benefit of making it easy to control the degree of verbosity. We no longer need a global setting; we can decide verbosity separately for every instance of RomanSequence.  Our test becomes:</p>
<p><code></p>
<pre>
def test_skips_invalid_numerals
  input = StringIO.new("I\nY\nIII\n")
  assert_equal 4, RomanSequence.new(input, <em>:quiet => true</em>).sum
end  
</pre>
<p></code></p>
<p>and RomanNumeral becomes</p>
<p><code></p>
<pre>
class RomanNumeral  
  def to_i
    case @value
    # ...
    else 
      <em>raise ArgumentError, "Invalid numeral '#{@value}'"</em>
    end
  end
end
</pre>
<p></code></p>
<p>Scores:</p>
<ul class="scores">
<li>+1 for solving the problem cleanly.</li>
</ul>
<h3>Good solution: move logging to specialized logger object</h3>
<p>The previous solution is acceptable, but it raises a question: if our requirement is to log an error message in production, why are we not testing that the message is in fact generated?  This solution was suggested by my friend Uberto Barbini.</p>
<p>In order to test that a message is actually generated, we pass the RomanSequence a logger object.  In production we will use a real logger that writes on a file somewhere.  In test, we will pass a fake logger that keeps its messages in an array in memory.  So it goes:</p>
<p><code></p>
<pre>
def test_skips_invalid_numerals
  input = StringIO.new("I\nY\nIII\n")
  <em>logger = FakeLogger.new</em>
  assert_equal 4, RomanSequence.new(input, <em>logger</em>).sum
  assert_equal "Invalid numeral 'Y'", <em>logger.last_message</em>
end  
</pre>
<p></code></p>
<p>And the fake logger is something as simple as</p>
<p><code></p>
<pre>
class FakeLogger
  def error(message)
    @last_message = message
  end
  
  def last_message
    return @last_message
  end
end
</pre>
<p></code></p>
<p>The fake logger idea solves both problems: it prevents the ugly error message to appear on the console when we run the tests, and it allows us to check that the proper error message was sent.  Note that this logger is much different than the one in snippet 1.2: there we had a global logging procedure, while here we have a regular object.</p>
<p>Still, the main idea about this exercise is to remember to handle the exception at the right level: at the bottom of the call stack.</p>
<p>Scores:</p>
<ul class="scores">
<li>+2 for solving the problem cleanly, *and* testing for all relevant behaviour.</li>
</ul>
<h3>Conclusions</h3>
<p>In this exercise I assign scores to various possible solutions.  This implies that I regard some solutions as good, and some as poor.  My judgments are based on the premise that there is nothing more to this problem than what I show here.  In reality, however, everything depends on context, so it might be that in a broader context, some solution that I judged poor might become reasonable.  Always design for the whole, not the particular!  But in general, it&#8217;s a safe bet that exception handling should be done as near as possible to the outermost application loop.</p>
<h3>Further reading</h3>
<p>Steve Freeman and Nat Pryce have a lot to say on the subject of logging.  See their book <a href="http://www.growing-object-oriented-software.com/">Growing Object-Oriented Software</a> (GOOS) and this <a href="http://skillsmatter.com/podcast/agile-scrum/fractal-tdd-using-tests-to-drive-system-design" title="Skills Matter : In The Brain of Steve Freeman: Fractal TDD:">presentation by Steve</a>.  Freeman and Pryce also make a point that code should be context-independent; see GOOS for that.</p>
<p>General wisdom on exceptions:</p>
<ul>
<li>Code Complete by Steve McConnell, <a href="http://my.safaribooksonline.com/book/software-engineering-and-development/0735619670/defensive-programming/exceptions" title="Code Complete, Second Edition &gt; Defensive Programming &gt; Exceptions - Pg. : Safari Books Online">section 2.8</a></li>
<li><em>Clean Code</em>, <a href="http://my.safaribooksonline.com/book/software-engineering-and-development/agile-development/9780136083238/error-handling/ch07" title="Clean Code: A Handbook of Agile Software Craftsmanship &gt; Error Handling - Pg. : Safari Books Online">chapter 7</a> by Michael Feathers.</li>
<li><em>Effective Java</em> by Joshua Bloch, <a href="http://my.safaribooksonline.com/book/programming/java/9780137150021/exceptions/ch09" title="Effective Java&#x2122;, Second Edition &gt; Exceptions - Pg. : Safari Books Online">chapter 9</a>.</li>
</ul>
]]></content:encoded>
							<wfw:commentRss>http://matteo.vaccari.name/blog/archives/789/feed</wfw:commentRss>
		<slash:comments>1</slash:comments>
							</item>
		<item>
		<title>Anti-FOR tips from the Yahtzee Kata</title>
		<link>http://matteo.vaccari.name/blog/archives/571</link>
				<comments>http://matteo.vaccari.name/blog/archives/571#respond</comments>
				<pubDate>Sat, 14 May 2011 15:47:20 +0000</pubDate>
		<dc:creator><![CDATA[matteo]]></dc:creator>
				<category><![CDATA[Agile]]></category>
		<category><![CDATA[Design Exercise]]></category>
		<category><![CDATA[Essay]]></category>
		<category><![CDATA[Expressive Code]]></category>

		<guid isPermaLink="false">http://matteo.vaccari.name/blog/?p=571</guid>
				<description><![CDATA[Again on the Kata Yahtzee, that I blogged about some time ago. If you have not solved the kata at least once, please stop reading this! Get back when you have. *&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* * Good to see you again! Now that you solved it, you probably know that the naive solution takes many &#8220;for&#8221; loops. Let [&#8230;]]]></description>
								<content:encoded><![CDATA[<p>Again on the <a href="http://codingdojo.org/cgi-bin/wiki.pl?KataYahtzee" title="Coding Dojo Wiki: KataYahtzee">Kata Yahtzee</a>, that I <a href="http://matteo.vaccari.name/blog/archives/311" title="Extreme Enthusiasm  &raquo; Blog Archive   &raquo; Report of the first run of the OCP kata">blogged about</a> some time ago.</p>
<p>If you have not solved the kata at least once, please stop reading this!  Get back when you have.</p>
<p><center><br />
  *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<br />
  *<br />
</center></p>
<p>Good to see you again!  Now that you solved it, you probably know that the naive solution takes many &#8220;for&#8221; loops.  Let <em>D</em> be the player dice, represented as <em>an array of die results</em>, e.g., D=(1,6,1,6,4). The naive rules for sixes would be</p>
<p><code></p>
<pre name="code" class="ruby:nogutter:nocontrols">
    def sixes_score 
      sum = 0
      for d in D
        if d == 6
          sum += 6
        end
      end
      return sum
    end
  </pre>
<p></code></p>
<p>This solution involves <em>searching</em> for sixes and adding up.  Why do we need to search?  We need to search because there are many different D that are worth exactly the same for the sixes rule.  For instance, both D=(1,2,3,6,6) and D=(6,6,1,2,3) are worth 12.</p>
<p><span id="more-571"></span></p>
<p>One way to avoid the search is to represent the die rolls in a <em>canonical form</em>, that is a form where two equivalent results are represented in the same way.  The obvious way to obtain a canonical form is to sort D; but in this particular case, we&#8217;d still need to search for sixes.</p>
<p>An alternative canonical form would be to count how many results we have: for instance D=(1,1,3,6,6) would be represented as C = [2,0,1,0,0,2], that is &#8220;two times 1, one time 3, two times 6.&#8221;  The rule for sixes becomes</p>
<p><code></p>
<pre name="code" class="ruby:nogutter:nocontrols">
    def sixes_score
      return 6*C[6]
    end
  </pre>
<p></code></p>
<p>(Note: we take C to be a 1-based array.  It&#8217;s easy to make one in Java or Ruby: use an array of length 7 and ignore index 0.)</p>
<p>The straight rules are also easy, because C is a canonical form for them as well:</p>
<p><code></p>
<pre name="code" class="ruby:nogutter:nocontrols">
    def small_straight_score
      if C == [1,1,1,1,1,0] then 15 else 0
    end
    def large_straight_score
      if C == [0,1,1,1,1,1] then 20 else 0
    end
  </pre>
<p></code></p>
<p>Now, how does this help us with the other rules?  Take the Yahtzee rule, for instance.  The naive solution</p>
<p><code></p>
<pre name="code" class="ruby:nogutter:nocontrols">
    def really_naive_yahtzee_score   
      for (i=1; i &lt; 5 ; i++)
        return 0 if D[i-1] &ne; D[i]
      end
      return 50
    end
  </pre>
<p></code></p>
<p>can be slightly improved by </p>
<p><code></p>
<pre name="code" class="ruby:nogutter:nocontrols">
    def slighly_less_naive_yahtzee_score     
      for d in D
        return 0 if D[0] &ne; d
      end
      return 50
    end
  </pre>
<p></code></p>
<p>Using C does not improve much as we still have to search:</p>
<p><code></p>
<pre name="code" class="ruby:nogutter:nocontrols">
    def still_naive_yahtzee_score
      for c in C
        return 50 if c == 5
      end
      return 0
    end
  </pre>
<p></code></p>
<p>This is because there are many different C that are equivalent with respect to the Yahtzee rule: for instance C = [0,0,0,5,0] and C=[0,5,0,0,0].  Can we apply the same reasoning and find another canonical representation?  Why yes! If we sort C = [0,0,0,5,0] to obtain S = {5,0,0,0,0} the yahtzee rule becomes very simple:</p>
<p><code></p>
<pre name="code" class="ruby:nogutter:nocontrols">
    def cool_yahtzee_score
      if S[0] == 5 then 50 else 0
    end
  </pre>
<p></code></p>
<p>Many other rules are immediately codified this way:</p>
<p><code></p>
<pre name="code" class="ruby:nogutter:nocontrols">
    def four_of_a_kind_score
      if S[0] &ge; 4 then sum(D) else 0
    end
    
    def full_house_score
      if S[0] == 3 &and; S[1] == 2 then 25 else 0
    end
  </pre>
<p></code></p>
<p>The pair rule is a bit more challenging: it is not part of the &#8220;official&#8221; rules but it make for interesting coding :o).  The rule is &#8220;Pair: The player scores the sum of the two highest matching dice. For example, 3, 3, 3, 4, 4  gives 8.&#8221;  Using C requires searching.  Using S would be no good (can you see why?)</p>
<p>Again: can you find a canonical representation for the pair rule so that we don&#8217;t have to search?  Hint: remove &#8220;noise&#8221; to reveal information.</p>
<h3>Conclusion</h3>
<p>It&#8217;s important to find <a href="http://www.antiifcampaign.com/" title="The Anti-IF Campaign">ways to remove IFs</a>.  It&#8217;s also important to find ways to remove FORs!  I <a href="http://matteo.vaccari.name/blog/archives/174" title="Extreme Enthusiasm  &raquo; Blog Archive   &raquo; TDD is not finished until the code speaks">blogged about this</a> before.</p>
<p>We used two ways to remove FORs here:</p>
<ol>
<li>Use canonical representations, like C and S;</li>
<li>Hide them in well-known functions like sort and sum.</li>
</ol>
<p>Our search for canonical forms helps us develop a <em>language</em> for reasoning effectively about our problem domain.  In fact we are <a href="http://alistair.cockburn.us/ASD+book+extract%3A+%22Naur,+Ehn,+Musashi%22" title="Programming as Theory Building">building a little <em>theory</em></a>.</p>
]]></content:encoded>
							<wfw:commentRss>http://matteo.vaccari.name/blog/archives/571/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
		<item>
		<title>The geometry lab &#8212; an exercise</title>
		<link>http://matteo.vaccari.name/blog/archives/395</link>
				<comments>http://matteo.vaccari.name/blog/archives/395#respond</comments>
				<pubDate>Tue, 15 Jun 2010 07:40:48 +0000</pubDate>
		<dc:creator><![CDATA[matteo]]></dc:creator>
				<category><![CDATA[Agile]]></category>
		<category><![CDATA[Design Exercise]]></category>
		<category><![CDATA[Expressive Code]]></category>

		<guid isPermaLink="false">http://matteo.vaccari.name/blog/?p=395</guid>
				<description><![CDATA[Last week I was traning a team on XP techniques. We tried the following exercise: I want you people to build me a Swing application that computes the area of a square with a given side length. I asked for an estimate. The devs were nervous, someone said &#8220;impossible!&#8221; :-) someone said 5 hours. I [&#8230;]]]></description>
								<content:encoded><![CDATA[<p>Last week I was traning a team on XP techniques.  We tried the following exercise:</p>
<blockquote><p> I want you people to build me a Swing application that computes the area of a square with a given side length.</p></blockquote>
<p>I asked for an estimate.  The devs were nervous, someone said &#8220;impossible!&#8221; :-) someone said 5 hours.  I played the part of the project-manager-who-was-once-a-developer and said &#8220;come on, five hours??  I could do that in 10 minutes in my sleep.  What&#8217;s so difficult about it&#8221;?  Then I reasoned with them that if we keep our estimates too comfortable, our business opportunities may fly out of the window.  They agreed on a 2 hours estimate.</p>
<p>They proceeded to implement the feature.  The three devs rotated every 7 minutes.  This was a good slot size; everyone was involved, even the junior one who is rarely given the keyboard.  The feature was done in one and a half hour.  Then I said</p>
<blockquote><p>Cool.  Now we need to compute the area of a triangle of a given base and height.  How much time for this?</p></blockquote>
<p>The devs estimated 1.5 hours.  It was delivered on time.  Now the fun part started.  The team wrote the application in the &#8220;usual&#8221; way, by writing new code for the new window.  No effort was spent, at this time, to reduce duplication.  I pointed out that</p>
<blockquote><p>We&#8217;re going to need to implement many more of these geometry formulae.  Make it so that it is trivial to add others.
</p></blockquote>
<p>The team came up with a design where the Swing window object is generic and can be customized to support the input for any formula that requires a variable number of inputs with different names.  They thought they could do it in 2 hours.  It took 4.  At some point we wasted a lot of time on Swing layouts, trying to fathom the mysteries of GroupLayout.  I gave some help here.  Then we were done!  Stepping again in my role of customer I said</p>
<blockquote><p>
Very well.  The next feature we need is to compute the area of a circle from the radius.
</p></blockquote>
<p>It was done in 10 minutes.  The customer was very satisfied, and so were the devs.</p>
<p>What have we learned?   </p>
<ul>
<li>I have learned the power of letting the team come up with their own design.  It&#8217;s difficult for me, an xp-trainer-who-was-once-a-developer, to give up giving guidance on design.  But time and again, I have seen the damage of doing so: the team follows my design, gets bogged down, does not learn.</li>
<li>We have learned how hard it is to make the code easy to change.  It would have been easy to declare we were &#8220;done&#8221; after the area of triangle was working.  But we were not really &#8220;done&#8221; from the point of view of TDD.  Remember, the cycle is red-green-REFACTOR, and by &#8220;refactor&#8221; what is really meant is &#8220;remove duplication&#8221;.
</li>
<li>Once you get to clean, refactored code, the cost of changes drops.  And it&#8217;s a pleasure to work with!</li>
<li>The decision to invest time in making the code generic might seem difficult.  After all, you can get skilled at copy-pasting Swing code and writing many copies of the Swing form class.  But then you are left with gobs of code.  And good luck applying a different graphic layout to them all!  My answer is that we should get skilled at writing flexible code.  It took us 4 hours to make the code generic.  Next time they have to do something similar, it will take less.
<p><a href="http://milano-xpug.pbworks.com/Velocita">Copying-and-pasting is a dead end</a>; there is a limit at how skilled you can become at it, and there is certainly a big problem in the quality of the code you deliver.  Learning to do good, clean, flexible code never ends.  It&#8217;s a path where you can get to write better and better code.  Which path would you rather be on?</li>
</ul>
<blockquote><p>
Very cool, guys.  This geometry app rocks!!
</p></blockquote>
]]></content:encoded>
							<wfw:commentRss>http://matteo.vaccari.name/blog/archives/395/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
		<item>
		<title>Design problem #2</title>
		<link>http://matteo.vaccari.name/blog/archives/388</link>
				<comments>http://matteo.vaccari.name/blog/archives/388#comments</comments>
				<pubDate>Mon, 14 Jun 2010 14:05:41 +0000</pubDate>
		<dc:creator><![CDATA[matteo]]></dc:creator>
				<category><![CDATA[Agile]]></category>
		<category><![CDATA[Design Exercise]]></category>
		<category><![CDATA[Expressive Code]]></category>

		<guid isPermaLink="false">http://matteo.vaccari.name/blog/?p=388</guid>
				<description><![CDATA[This is a subset of the Back to the Checkout kata by Dave Thomas, which I used many times as a TDD training exercise. Suppose you have a PriceRules object that knows that the prices of items. Its responsibility is to know the following table: Item Unit Price Special Price A 50 3 for 130 [&#8230;]]]></description>
								<content:encoded><![CDATA[<p>This is a subset of the <a href="http://codekata.pragprog.com/2007/01/kata_nine_back_.html">Back to the Checkout</a> kata by Dave Thomas, which I used many times as a TDD training exercise.  </p>
<p>Suppose you have a PriceRules object that knows that the prices of items.  Its responsibility is to know the following table:</p>
<blockquote>
<table>
<tr>
<th>Item</th>
<th>Unit Price</th>
<th>Special Price</th>
<tr>
<td>A</td>
<td>50</td>
<td>3 for 130</td>
</tr>
<tr>
<td>B</td>
<td>30</td>
<td>2 for 45</td>
</tr>
<tr>
<td>C</td>
<td>20</td>
</tr>
<tr>
<td>D</td>
<td>15</td>
</tr>
</table>
</blockquote>
<p>Then you have a Cart object that knows which items a customer is trying to buy.  For instance, a given cart could contain the list [A, A, C, A, D]. </p>
<p>The problem is to compute the total that the customer has to pay, out of a collaboration between (at least) the cart and the pricerRules objects.   It seems easy, but there is a catch: you are forbidden to use getters.  All methods must return &#8220;void&#8221;, in Java terms.   Design the messages that are exchanged between the objects and produce the desired result.  (In the example, it would be 165).  Have fun!</p>
]]></content:encoded>
							<wfw:commentRss>http://matteo.vaccari.name/blog/archives/388/feed</wfw:commentRss>
		<slash:comments>17</slash:comments>
							</item>
		<item>
		<title>Software Design problems, anyone?</title>
		<link>http://matteo.vaccari.name/blog/archives/378</link>
				<comments>http://matteo.vaccari.name/blog/archives/378#comments</comments>
				<pubDate>Sun, 13 Jun 2010 07:45:29 +0000</pubDate>
		<dc:creator><![CDATA[matteo]]></dc:creator>
				<category><![CDATA[Agile]]></category>
		<category><![CDATA[Design Exercise]]></category>
		<category><![CDATA[Expressive Code]]></category>

		<guid isPermaLink="false">http://matteo.vaccari.name/blog/?p=378</guid>
				<description><![CDATA[You learn math by solving problems. Problems frame the way you learn, give you a tangible proof that you&#8217;re progressing, give you a sense of meaning and achievement. How do you learn physics? By studying the books of course, but then solving physics problems is very important. How do you learn to play deep games [&#8230;]]]></description>
								<content:encoded><![CDATA[<p>You learn math by solving problems.  Problems frame the way you learn, give you a tangible proof that you&#8217;re progressing, give you a sense of meaning and achievement.  How do you learn physics?  By studying the books of course, but then solving physics problems is very important.  How do you learn to play deep games such as chess or go?  By playing, mostly.  And then by pondering and solving problems.  Electronics?  Chemistry?  Building science?  Genetics?  The books on these subjects are full of problems.</p>
<p>How do you learn good software design?  I don&#8217;t know.  The books that I&#8217;ve read explain principles, and provide examples.  Rarely I&#8217;ve seen books that contain problems, exercises, or challenges.  (Notable exceptions: William Wake&#8217;s <em>Refactoring Workbook</em> and Ka Iok Tong&#8217;s <a href="http://www2.cpttm.org.mo/cyberlab/softdev/ESAD/">Essential Skills for Agile Development</a>.)  </p>
<p>I propose that we assemble a collection of problems meant to develop and discuss software design.  A good problem for this goal would problem *not* have a single correct answer, for design and engineering are always a matter of compromises.  A good problem should be a means to discuss the various choices and tradeoff, and worse and better ways to solve it.  A good problem should be a small framework.</p>
<p>Let&#8217;s start!  Here is a problem that I find interesting.  The good old Fizz-Buzz problem goes like this:</p>
<blockquote><p>
Write a program that prints the numbers in order from 1 to 100, with the exception that when a number is a multiple of 3, it prints &#8220;Fizz&#8221;.  When a number is a multiple of 5, it prints &#8220;Buzz&#8221;.  And when a number is multiple of both, it prints &#8220;FizzBuzz&#8221;.  In all other cases, it just prints the decimal representation of the number.
</p></blockquote>
<p>There is an obvious way to solve this exercise, of course.  It&#8217;s a very simple problem, from the point of view of programming.  I would have the student solve it however they like.  Most solutions contain a 3-way IF.  I would then ask students to <strong>remove duplication</strong>.  Early XP books were strong on removing duplication, for a good reason.  It takes a bit of training to see how much duplication can creep in even such a small bit of programming.  </p>
<p>The usual objection I get at this point is that it makes no sense to go this deep in removing duplication for such a small and trivial example.  They also will say that the 3-IFs version is more readable than any version where duplication is removed.  This is the crux of the matter.</p>
<p>I then continue the exercise by adding the requirement that  </p>
<blockquote><p>
For multiples of 7, the program prints &#8220;Bang&#8221;.
</p></blockquote>
<p>Easy, they say.  Add a fourth IF.  Not so fast, I say :-)  </p>
<blockquote><p>
For multiples of 7 and 3, the program prints &#8220;FizzBang&#8221;.  For multiples of 5 and 7, the program prints &#8220;BuzzBang&#8221;.  For multiples of 3, 5, 7, the program prints &#8220;FizzBuzzBang&#8221;!
</p></blockquote>
<p>Now we have an exploding number of IFs.  If the next requirement is of the same sort as this one, we see how the IF-chain solution becomes untenable :-)  Now solve this!</p>
<p>Update:</p>
<ul>
<li>I got the idea of using FizzBuzz as a design example from <a href="http://giordano.scalzo.biz/">Giordano Scalzo</a>, who presented it at the <a href="http://milano-xpug.pbworks.com/">Milano XPUG</a> and posted a solution on slideshare</li>
<li>Other sources of problems, in no particular order: the <em><a href="http://www.industriallogic.com/xp/refactoring/">Refactoring to patterns</a></em> book by Joshua Kerievsky.  The list of <a href="http://codekata.pragprog.com/">katas by Dave Thomas</a>.  The <a href="http://www.informit.com/articles/article.aspx?p=1402446">Refactoring in Ruby</a> book by William Wake and Mike Rutherford.  The <a href="http://rubyquiz.com/">Ruby Quiz</a> site.  I&#8217;m not merely looking for <em>programming</em> problems.  I&#8217;m looking for <em>design</em> problems.  The difference is that I don&#8217;t just want a problem that requires a correct or efficient solution.  I want a problem that requires a solution that is easy to understand and change.
</li>
</ul>
]]></content:encoded>
							<wfw:commentRss>http://matteo.vaccari.name/blog/archives/378/feed</wfw:commentRss>
		<slash:comments>6</slash:comments>
							</item>
	</channel>
</rss>
